생각메모

- 저번 스터디의 교훈 - 너무 욕심을 많이 부림. 기능을 어디까지 구현할 지에 대한 생각이 필요했다. 기능을 추가하는 건 좋지만, 보통은 기능 추가로만 끝나지 않고
  에러처리 할 게 새로 생기거나 다른 기능에 영향을 미칠 수 있음. 그런 부분에 대한 처리를 안한다면 완성도가 낮아짐
- 딱 하나의 문제를 확실하게 해결해준다면, 작은 소프트웨어라도 충분히 서비스 할 가치가 있다. (이번 중위->후위식 서비스, 내 트리를 꾸며줘)

============

* 계산기의 작동 메커니즘 *
계산기에서 구현되어야 하는 로직이 무엇일까 (인터페이스 - 머리가슴배 / 입력연산출력)

입력을 어떻게 받을까 (무한루프를 돌릴까 아니면 한 번만 입력을 받고 끝낼까 / 유저의 잘못된 입력에 대한 에러처리는 어디서 어떻게 할까)
연산은 어떻게 시킬까 (컴퓨터는 사람처럼 계산하지는 않는다 들었는데.. 수식을 한 번에 입력받고 처리하는 스택계산기를 만들어볼까?)

* 코드 작성하면서 신경썼던 것들 *
> 최대한 주석이 필요하지 않은 코드를 작성하기 위해 노력함 (소스코드 자체가 사람말로 해석될수 있도록[CalcUtil 파일], 스트림 개념)

============

중위식(사람) -> 후위식(기계) 변환 규칙성
0. 숫자랑 소수점이 들어오면 숫자를 문자열 형태로 이어붙인 뒤 output stack에 push한다
1. *뒤에 +가 오면 스택에 있는 걸 전부 비우면서 output에 push해 준 뒤 +를 operators에 push한다
2. TOP에 있는 연산자랑 ★같은 레벨의★ 연산자가 들어오려고 하면 operators에서 하나를 output으로 비워내고 operators에 들여보낸다 (리팩토링: 그냥 들어온 연산자를 output에 추가만 해주면 됨)
3. +뒤에 *가 하나 붙을 수 있음
4. 1~3 케이스에 해당하지 않는 경우 operators에만 push.
5. 더이상 formula에서 꺼낼 게 없는데 연산자스택에 요소가 남아있는 경우 요소들을 모두 pop시켜서 output에 붙이고 변환을 끝낸다

* 테스트코드가 필요했던 부분
- 유저로부터 입력받은 중위식이 후위식으로 잘 변환되는지
- 계산메서드로 넘겨준 후위식을 통해 계산결과가 잘 반환되는지
- 일부로 틀린 산식을 줬을 때 적절한 에러유형으로 반환되는지

* 에러처리
- 유저 입력만 받을 때 유효성검사만 깔끔하게 하면 뒤에서 에러처리 할 게 확 줄어듦(0으로 나누는 그런 에러들만 처리하면 됨)
- 너무 큰 숫자일 때 에러처리

* 디렉토리 구조
- 계산기: Calculator[인터페이스], PostfixCalc
- 서비스(비즈니스로직): Operation[연산담당], ExpressionConverter[식변환 담당]
- 유틸리티: CalcUtil

TODO: junit, 클래스다이어그램, 순서도, 발표자료
